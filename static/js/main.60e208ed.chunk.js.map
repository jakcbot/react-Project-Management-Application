{"version":3,"sources":["components/AddProjects.js","components/ListProjects.js","components/Search.js","components/App.js","reportWebVitals.js","index.js"],"names":["AddProjects","props","initialState","projectName","projectIdentifier","description","start_date","end_date","state","setState","useState","handleChange","e","name","value","target","prevState","[object Object]","React","createElement","className","concat","formDisplay","id","noValidate","onSubmit","preventDefault","alert","newProject","addProject","toggleForm","htmlFor","type","placeholder","onChange","ListProjects","projects","map","item","style","backgroundColor","border","width","margin","key","onClick","deleteProject","FaTimes","Moment","date","parse","format","Search","searchTerm","setSearchTerm","sortType","setSortType","term","searchProjects","resetList","sortProjects","App","myProjects","setMyProjects","setFormDisplay","lastIndex","setLastIndex","useEffect","async","res","fetch","data","json","tempApts","prevIndex","getAppts","prevDisplay","apt","prevProjects","filteredProjects","filter","project","toLowerCase","includes","sortBy","sortedProjects","sort","a","b","localeCompare","without","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.60e208ed.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst AddProjects = (props) => {\n  // Initial state for the form input values\n  const initialState = {\n    projectName: '',\n    projectIdentifier: '',\n    description: '',\n    start_date: '',\n    end_date: ''\n  };\n\n  // State to manage form input values\n  const [state, setState] = useState(initialState);\n\n  // Handle form submission\n  const handleAdd = (e) => {\n    e.preventDefault();\n\n    // Check if any of the fields are empty\n    if (!state.projectName || !state.projectIdentifier || !state.description || !state.start_date || !state.end_date) {\n      // Handle the case where at least one field is empty (display an error message, prevent form submission, etc.)\n      alert(\"Please fill in all fields\");\n      return;\n    }\n\n    // Destructure form input values\n    const { projectName, projectIdentifier, description, start_date, end_date } = state;\n    \n    // Create a new project object with form input values\n    const newProject = {\n      projectName,\n      projectIdentifier,\n      description,\n      start_date,\n      end_date\n    };\n\n    // Call the addProject function passed via props to add the new project\n    props.addProject(newProject);\n\n    // Reset the form input values by setting state to initial values\n    setState(initialState);\n\n    // Toggle the form display using the toggleForm function passed via props\n    props.toggleForm();\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    // Update the state with the new input value\n    setState((prevState) => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n\n  return (\n    <div className={`card textcenter mt-3 ${props.formDisplay ? '' : 'add-project'}`}>\n      <div className=\"card-body\">\n        <form id=\"aptForm\" noValidate onSubmit={handleAdd}>\n          {/* Form input for project name */}\n          <div className=\"form-group form-row\">\n            <label className=\"col-md-2 col-form-label text-md-right\" htmlFor=\"projectName\"></label>\n            <div className=\"col-md-10\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"projectName\"\n                id=\"projectName\"\n                placeholder=\"Project's Name\"\n                value={state.projectName}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n\n          {/* Form input for project identifier */}\n          <div className=\"form-group form-row\">\n            <label className=\"col-md-2 col-form-label text-md-right\" htmlFor=\"projectIdentifier\"></label>\n            <div className=\"col-md-10\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"projectIdentifier\"\n                id=\"projectIdentifier\"\n                placeholder=\"Project's ID\"\n                value={state.projectIdentifier}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n          \n          {/* Form input for project description */}\n          <div className=\"form-group form-row\">\n            <label className=\"col-md-2 col-form-label text-md-right\" htmlFor=\"description\"></label>\n            <div className=\"col-md-10\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"description\"\n                id=\"description\"\n                placeholder=\"project description\"\n                value={state.description}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n\n          {/* Form inputs for start and end dates */}\n          <div className=\"form-group form-row\">\n            start date:\n            <label className=\"col-md-2 col-form-label text-md-right\" htmlFor=\"start_date\"></label>\n            <div className=\"col-md-4\">\n              <input\n                type=\"date\"\n                className=\"form-control\"\n                name=\"start_date\"\n                id=\"start_date\"\n                value={state.start_date}\n                onChange={handleChange}\n              />\n            </div>\n            end date:\n            <label className=\"col-md-2 col-form-label text-md-right\" htmlFor=\"end_date\"> </label>\n            <div className=\"col-md-4\">\n              <input\n                type=\"date\"\n                className=\"form-control\"\n                name=\"end_date\"\n                id=\"end_date\"\n                value={state.end_date}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n\n          {/* Form submit button */}\n          <div className=\"form-group form-row mb-0\">\n            <div className=\"offset-md-2 col-md-10\">\n              <button type=\"submit\" className=\"btn btn-primary d-block ml-auto\">\n                Add Project\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default AddProjects;\n","import React from 'react';\nimport { FaTimes } from 'react-icons/fa';\nimport Moment from 'react-moment';\n\nconst ListProjects = (props) => {\n  return (\n    <div className=\"project-list item-list mb-3 bg-white\"  >\n      {props.projects.map(item => (\n        <div className=\"project-item col media py-3\" style={{ backgroundColor: 'white', border: '1px solid black', width: '60%', margin: 'auto'}}\n         key={item.projectIdentifier}>\n          \n          <div className=\"mr-3\">\n            <button\n              className=\"project-delete btn btn-sm btn-danger\"\n              onClick={() => props.deleteProject(item)}\n            >\n              <FaTimes />\n            </button>\n          </div>\n          <br></br>\n          <div className=\"project-info media-body\">\n          <span className=\"project-name\">project name: {item.projectName}</span>\n            <div className=\"project-head d-flex\">\n              \n              <span className=\"start_date ml-auto\">start_date:  \n                <Moment\n                  date={item.start_date}\n                  parse=\"YYYY-MM-dd hh:mm\"\n                  format=\"MMM-D h:mma\"\n                />\n              </span>\n              <br></br>\n              <span className=\"end-date ml-auto\">end_date:  \n                <Moment\n                  date={item.end_date}\n                  parse=\"YYYY-MM-dd hh:mm\"\n                  format=\"MMM-D h:mma\"\n                />\n              </span>\n            </div>\n\n            <div className=\"description\">\n              <span className=\"description-item\">description:  </span>\n              <span> {item.description}</span>\n            </div>\n          </div>\n          <br></br>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ListProjects;","import React, { useState } from 'react';\n\nconst Search = (props) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortType, setSortType] = useState('');\n\n  // Handle search input change\n  const handleSearchChange = (e) => {\n    const term = e.target.value;\n    setSearchTerm(term);\n    props.searchProjects(term);\n\n    // If the search term is empty, trigger a function to reset the list\n    if (!term) {\n      props.resetList(); // Ensure that resetList is defined and passed down as a prop\n    }\n  };\n\n  // Handle sort option change\n  const handleSortChange = (e) => {\n    const type = e.target.value;\n    setSortType(type);\n    props.sortProjects(type);\n  };\n\n  return (\n    <div className=\"search-sort\">\n      <div className=\"search\">\n        <label htmlFor=\"searchInput\">Search:</label>\n        <input\n          type=\"text\"\n          id=\"searchInput\"\n          value={searchTerm}\n          onChange={handleSearchChange}\n          placeholder=\"Search projects...\"\n        />\n      </div>\n      <div className=\"sort\">\n        <label htmlFor=\"sortSelect\">Sort by:</label>\n        <select id=\"sortSelect\" value={sortType} onChange={handleSortChange}>\n          <option value=\"\">None</option>\n          <option value=\"name_asc\">Name (A-Z)</option>\n          <option value=\"name_desc\">Name (Z-A)</option>\n          <option value=\"start_date_asc\">Start Date (Earliest First)</option>\n          <option value=\"start_date_desc\">Start Date (Latest First)</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useEffect, useState } from 'react';\nimport '../css/App.css';\n\nimport { without } from 'lodash';\nimport AddProjects from './AddProjects';\nimport ListProjects from './ListProjects';\nimport Search from './Search';\n\nconst App = () => {\n  // State variables\n  const [myProjects, setMyProjects] = useState([]); // Array to store projects\n  const [formDisplay, setFormDisplay] = useState(false); // Toggle for displaying add project form\n  const [lastIndex, setLastIndex] = useState(0); // Index for new projects\n \n  // Toggle the display of the add project form\n  const toggleForm = () => {\n    setFormDisplay((prevDisplay) => !prevDisplay);\n  };\n\n  // Add a new project\n  const addProject = (apt) => {\n    apt.id = lastIndex; // Assign a unique identifier to the project\n    setMyProjects((prevProjects) => [apt, ...prevProjects]); // Add the new project to the projects array\n    setLastIndex((prevIndex) => prevIndex + 1); // Increment the index for the next project\n  };\n\n  // Delete a project\n  const deleteProject = (apt) => {\n    const tempApts = without(myProjects, apt); // Create a new array without the deleted project\n    setMyProjects(tempApts); // Update the projects array\n  };\n\n  //search project\n  const searchProjects = (searchTerm) => {\n    // Perform search logic here\n    const filteredProjects = myProjects.filter((project) => {\n      // Match the project name or start date with the search term\n      return (\n        project.projectName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        project.start_date.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    });\n    // Update the project list with the filtered projects\n    setMyProjects(filteredProjects);\n  };\n  // Sort projects\nconst sortProjects = (sortBy) => {\n  let sortedProjects = [...myProjects]; // Create a copy of the projects array\n\n  // Perform sorting based on the sort criteria\n  if (sortBy === 'Name (A-Z)') {\n    sortedProjects.sort((a, b) => a.projectName.localeCompare(b.projectName));\n  } else if (sortBy === 'start_date') {\n    sortedProjects.sort((a, b) => a.start_date.localeCompare(b.start_date));\n  }\n\n  // Update the project list with the sorted projects\n  setMyProjects(sortedProjects);\n  };\n\n  useEffect(() => {\n    // Fetch data from a JSON file and initialize projects array\n    const getAppts = async () => {\n      const res = await fetch('./data.json'); // Fetch data from JSON file\n      const data = await res.json(); // Parse the JSON data\n      const tempApts = data.map((item) => {\n        // eslint-disable-next-line\n        item.id = lastIndex; // Assign a unique identifier to each project\n        setLastIndex((prevIndex) => prevIndex + 1); // Increment the index for the next project\n        return item;\n      });\n      setMyProjects(tempApts); // Set the projects array with the fetched data\n      return data; // Return the fetched data (optional)\n    };\n\n    getAppts(); // Call the async function to fetch and initialize projects\n  }, [lastIndex]);\n\n  //render components\n  return (\n    <main className=\"page bg-white\" id=\"petratings\">\n      <h1>Project Management</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12 bg-white\">\n            <div className=\"container\">\n              Create new Project\n              <AddProjects\n                formDisplay={formDisplay}\n                toggleForm={toggleForm}\n                addProject={addProject}\n              />\n              <br></br>\n              <Search \n              searchProjects={searchProjects} \n              sortProjects={sortProjects}\n              />\n\n              <br></br>\n              <ListProjects\n                projects={myProjects}\n                deleteProject={deleteProject}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './components/App';\nimport './css/index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}